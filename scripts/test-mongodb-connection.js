// Script para testar a conex√£o com MongoDB
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente do arquivo .env.local se existir
const envPath = path.resolve(process.cwd(), '.env.local');
if (fs.existsSync(envPath)) {
  console.log('Carregando vari√°veis de ambiente de:', envPath);
  dotenv.config({ path: envPath });
} else {
  console.log('Arquivo .env.local n√£o encontrado. Usando vari√°veis de ambiente padr√£o.');
  // Carregar .env se existir como fallback
  dotenv.config();
}

async function testConnection() {
  console.log('=== Teste de Conex√£o com MongoDB ===\n');
  
  // Obter a URI do MongoDB das vari√°veis de ambiente
  const uri = process.env.MONGODB_URI || process.env.MONGODB_URI_FALLBACK || 'mongodb://localhost:27017/xadrex';
  
  if (!uri) {
    console.error('‚ùå MONGODB_URI n√£o est√° definida no ambiente');
    process.exit(1);
  }
  
  // Sanitizar URI para n√£o mostrar senha
  const sanitizedUri = uri.replace(/mongodb(\+srv)?:\/\/([^:]+):([^@]+)@/, 'mongodb$1://$2:****@');
  console.log(`üîÑ Tentando conectar a: ${sanitizedUri}`);
  
  try {
    // Configura√ß√µes da conex√£o
    const options = {
      bufferCommands: false,
      maxIdleTimeMS: 60000,
      socketTimeoutMS: 30000,
      connectTimeoutMS: 10000,
      serverSelectionTimeoutMS: 10000
    };
    
    // Tentar conectar
    console.log('Conectando...');
    
    const connection = await mongoose.connect(uri, options);
    
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    // Verificar bancos de dados dispon√≠veis
    const admin = connection.connection.db.admin();
    const dbInfo = await admin.listDatabases();
    
    console.log('\nüìä Bancos de dados dispon√≠veis:');
    dbInfo.databases.forEach(db => {
      console.log(`   - ${db.name} (${Math.round(db.sizeOnDisk / 1024 / 1024 * 100) / 100} MB)`);
    });
    
    // Verificar se o banco xadrex existe
    const xadrexDB = dbInfo.databases.find(db => db.name === 'xadrex');
    if (xadrexDB) {
      console.log('\n‚úÖ Banco de dados "xadrex" encontrado!');
      
      // Verificar cole√ß√µes no banco xadrex
      const collections = await connection.connection.db.listCollections().toArray();
      
      console.log('\nüìã Cole√ß√µes no banco "xadrex":');
      if (collections.length === 0) {
        console.log('   Nenhuma cole√ß√£o encontrada.');
      } else {
        collections.forEach(collection => {
          console.log(`   - ${collection.name}`);
        });
      }
      
      // Verificar se a cole√ß√£o players existe
      const playersCollection = collections.find(c => c.name === 'players');
      if (playersCollection) {
        // Contar documentos na cole√ß√£o players
        const count = await connection.connection.db.collection('players').countDocuments();
        console.log(`\n‚úÖ Cole√ß√£o "players" encontrada com ${count} documento(s)`);
      } else {
        console.log('\n‚ùå Cole√ß√£o "players" n√£o encontrada');
      }
    } else {
      console.log('\n‚ùå Banco de dados "xadrex" n√£o encontrado');
      console.log('   O banco ser√° criado automaticamente quando dados forem inseridos');
    }
    
    // Desconectar
    await mongoose.disconnect();
    console.log('\nüîå Desconectado do MongoDB');
    
  } catch (error) {
    console.error('‚ùå Erro de conex√£o:', error.message);
    console.log('\nSugest√µes para resolver o problema:');
    console.log('1. Verifique se o servi√ßo MongoDB est√° rodando');
    console.log('2. Verifique se a URI est√° correta no arquivo .env.local');
    console.log('3. Verifique se as credenciais s√£o v√°lidas');
    console.log('4. Verifique se o seu IP est√° na lista de IPs permitidos (para MongoDB Atlas)');
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nErro espec√≠fico: Conex√£o recusada');
      console.log('- O servidor MongoDB n√£o est√° rodando ou a porta est√° bloqueada');
      console.log('- Inicie o servi√ßo MongoDB local ou corrija a URI remota');
    }
    
    if (error.message.includes('authentication failed')) {
      console.log('\nErro espec√≠fico: Falha na autentica√ß√£o');
      console.log('- Usu√°rio ou senha incorretos na URI de conex√£o');
    }
    
    process.exit(1);
  }
}

// Executar o teste
testConnection().catch(err => {
  console.error('Erro n√£o tratado:', err);
  process.exit(1);
}); 